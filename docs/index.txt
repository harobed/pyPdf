=================================
Welcome to PyPdf's documentation!
=================================

A Pure-Python library built as a PDF toolkit. It is capable of:

* extracting document information (title, author, ...),
* splitting documents page by page,
* merging documents page by page,
* cropping pages,
* merging multiple pages into a single page,
* encrypting and decrypting PDF files.

By being Pure-Python, it should run on any Python platform without any 
dependencies on external libraries. It can also work entirely on 
StringIO objects rather than file streams, allowing for PDF manipulation 
in memory. It is therefore a useful tool for websites that manage or 
manipulate PDFs.

Download Latest
===============

The latest release of pyPdf is version 1.13, released on December 4, 2010. All releases of pyPdf are distributed under the terms of a modified BSD license.

* `pyPdf-1.13.tar.gz <http://pybrary.net/pyPdf/pyPdf-1.13.tar.gz>`_ (src)
* `pyPdf-1.13.zip <http://pybrary.net/pyPdf/pyPdf-1.13.zip>`_ (src)
* `pyPdf-1.13.win32.exe <http://pybrary.net/pyPdf/pyPdf-1.13.win32.exe>`_ (Win32 installer)

Documentation
=============

Documentation of the pyPdf module is available `online <http://pybrary.net/pyPdf/pythondoc-pyPdf.pdf.html>`_. 
This documentation is produced by `PythonDoc <http://effbot.org/zone/pythondoc.htm>`_, and as a result can also be seen integrated with 
the source code.

Source Code Repository
======================

pyPdf is distributed under the terms of a modified BSD license. The complete 
source code and history is available through a git repository for anyone 
who is interested, at http://github.com/mfenniak/pyPdf/tree/trunk. There 
is also a Python 3.0 compatible branch available 
at http://github.com/mfenniak/pyPdf/tree/py3.

Example
=======

::

    from pyPdf import PdfFileWriter, PdfFileReader

    output = PdfFileWriter()
    input1 = PdfFileReader(file("document1.pdf", "rb"))

    # print the title of document1.pdf
    print "title = %s" % (input1.getDocumentInfo().title)

    # add page 1 from input1 to output document, unchanged
    output.addPage(input1.getPage(0))

    # add page 2 from input1, but rotated clockwise 90 degrees
    output.addPage(input1.getPage(1).rotateClockwise(90))

    # add page 3 from input1, rotated the other way:
    output.addPage(input1.getPage(2).rotateCounterClockwise(90))
    # alt: output.addPage(input1.getPage(2).rotateClockwise(270))

    # add page 4 from input1, but first add a watermark from another pdf:
    page4 = input1.getPage(3)
    watermark = PdfFileReader(file("watermark.pdf", "rb"))
    page4.mergePage(watermark.getPage(0))

    # add page 5 from input1, but crop it to half size:
    page5 = input1.getPage(4)
    page5.mediaBox.upperRight = (
        page5.mediaBox.getUpperRight_x() / 2,
        page5.mediaBox.getUpperRight_y() / 2
    )
    output.addPage(page5)

    # print how many pages input1 has:
    print "document1.pdf has %s pages." % input1.getNumPages()

    # finally, write "output" to document-output.pdf
    outputStream = file("document-output.pdf", "wb")
    output.write(outputStream)
    outputStream.close()

.. include:: ../CHANGELOG
